题目描述：
Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.
Example 1:
Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
Example 2:
Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
Example 3:
Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
Example 4:
Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".
Note:
1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.

思路：遇到一个“#”就退一格（删除前面一个元素），遇到两个“#”就退两格-------->用栈
写一个函数，参数是字符串。返回一个字符串最终得到的字符栈。
每个字符串调用该函数，返回多个栈。
直接用 栈.equals(栈)  比较栈是否相同


实现：
public boolean backspaceCompare(String S, String T) {
   return S.compute().equals(T.compute());
}

public Stack<Character> compute(String s){   //返回类型是Stack！！！！
Stack<Character> stack=new Stack<>();
  for(char c:s.toCharArray()){
    if(c!='#'){
     stack.push(c);
    }
    else{
     if(!stack.isEmpty()){
      stack.pop();
     }
    }
  }
return stack;
}

